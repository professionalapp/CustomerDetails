@page
@model CustomerDetails.Pages.AddEmployeeModel
@{
    ViewData["Title"] = "إضافة عميل";
}

@section Styles {
    <style>
        .image-upload-container {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            background-color: #f8f9fa;
            transition: all 0.3s ease;
        }

        .image-upload-container:hover {
            border-color: #007bff;
            background-color: #e3f2fd;
        }

        .image-preview {
            position: relative;
            display: inline-block;
            margin-bottom: 15px;
        }

        .preview-image {
            max-width: 200px;
            max-height: 200px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .remove-image {
            position: absolute;
            top: -10px;
            right: -10px;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .upload-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .upload-buttons .btn {
            min-width: 120px;
            padding: 10px 20px;
        }

        .upload-status {
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
            display: none;
        }

        .upload-status.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .upload-status.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .upload-status.uploading {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
    </style>
}

<div class="container mt-4">
    <h2>إضافة عميل جديد</h2>
    <form id="addEmployeeForm" class="mt-3">
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">رقم العميل</label>
                <input class="form-control" id="employeeId" required />
            </div>
            <div class="col-md-4">
                <label class="form-label">نوع الوثيقة</label>
                <select class="form-select" id="identityType">
                    <option value="هوية أردنية">هوية أردنية</option>
                    <option value="جواز سفر">جواز سفر</option>
                    <option value="إقامة">إقامة</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">الاسم</label>
                <input class="form-control" id="name" required />
            </div>
            <div class="col-md-4">
                <label class="form-label">العمر</label>
                <input type="number" class="form-control" id="age" min="0" />
            </div>
            <div class="col-md-8">
                <label class="form-label">العنوان</label>
                <input class="form-control" id="address" />
            </div>
            <div class="col-md-12">
                <label class="form-label">الصورة الشخصية</label>
                <div class="image-upload-container">
                    <!-- معاينة الصورة -->
                    <div id="imagePreview" class="image-preview" style="display: none;">
                        <img id="previewImg" src="" alt="معاينة الصورة" class="preview-image">
                        <button type="button" class="btn btn-sm btn-danger remove-image" onclick="removeImage()">
                            <i class="fas fa-times"></i> حذف
                        </button>
                    </div>

                    <!-- أزرار اختيار الصورة -->
                    <div id="imageUploadButtons" class="upload-buttons">
                        <button type="button" class="btn btn-primary" onclick="selectImageFromGallery()">
                            <i class="fas fa-images"></i> الاستديو
                        </button>
                    </div>

                    <!-- حقل الملف المخفي -->
                    <input type="file" id="imageInput" accept="image/*" style="display: none;"
                        onchange="handleImageSelect(event)">
                </div>
            </div>
        </div>
        <div class="mt-3">
            <button type="submit" class="btn btn-primary">حفظ</button>
            <a asp-page="/Employees" class="btn btn-secondary">العودة</a>
        </div>
    </form>

    <div id="resultMsg" class="mt-3"></div>
</div>

@section Scripts {
    <script>
        let selectedImageFile = null;
        let uploadedImageUrl = null;

        // اختيار الصورة من الاستديو
        function selectImageFromGallery() {
            const input = document.getElementById('imageInput');
            input.removeAttribute('capture');
            input.click();
        }

        // التعامل مع اختيار الصورة
        function handleImageSelect(event) {
            const file = event.target.files[0];
            if (file) {
                selectedImageFile = file;
                showImagePreview(file);
                uploadImageToCloudinary(file);
            }
        }

        // عرض معاينة الصورة
        function showImagePreview(file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('previewImg').src = e.target.result;
                document.getElementById('imagePreview').style.display = 'block';
                document.getElementById('imageUploadButtons').style.display = 'none';
            };
            reader.readAsDataURL(file);
        }

        // حذف الصورة
        function removeImage() {
            selectedImageFile = null;
            uploadedImageUrl = null;
            document.getElementById('imagePreview').style.display = 'none';
            document.getElementById('imageUploadButtons').style.display = 'flex';
            document.getElementById('imageInput').value = '';
            hideUploadStatus();
        }

        // رفع الصورة إلى Cloudinary
        async function uploadImageToCloudinary(file) {
            showUploadStatus('جاري رفع الصورة...', 'uploading');

            try {
                const formData = new FormData();
                formData.append('file', file);
                formData.append('upload_preset', 'imgupload');
                formData.append('folder', 'employees');

                const response = await fetch('https://api.cloudinary.com/v1_1/dnx3ypscu/image/upload', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const data = await response.json();
                    uploadedImageUrl = data.secure_url;
                    showUploadStatus('تم رفع الصورة بنجاح!', 'success');
                } else {
                    throw new Error('فشل في رفع الصورة');
                }
            } catch (error) {
                console.error('خطأ في رفع الصورة:', error);
                showUploadStatus('خطأ في رفع الصورة: ' + error.message, 'error');
            }
        }

        // عرض حالة الرفع
        function showUploadStatus(message, type) {
            let statusDiv = document.getElementById('uploadStatus');
            if (!statusDiv) {
                statusDiv = document.createElement('div');
                statusDiv.id = 'uploadStatus';
                statusDiv.className = 'upload-status';
                document.querySelector('.image-upload-container').appendChild(statusDiv);
            }

            statusDiv.textContent = message;
            statusDiv.className = `upload-status ${type}`;
            statusDiv.style.display = 'block';
        }

        // إخفاء حالة الرفع
        function hideUploadStatus() {
            const statusDiv = document.getElementById('uploadStatus');
            if (statusDiv) {
                statusDiv.style.display = 'none';
            }
        }
        const form = document.getElementById('addEmployeeForm');
        const resultMsg = document.getElementById('resultMsg');
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            resultMsg.innerHTML = '';
            const payload = {
                employeeId: document.getElementById('employeeId').value.trim(),
                identityType: document.getElementById('identityType').value,
                name: document.getElementById('name').value.trim(),
                age: parseInt(document.getElementById('age').value || '0'),
                address: document.getElementById('address').value.trim(),
                imageUrl: uploadedImageUrl || '' // استخدام رابط الصورة المرفوعة
            };

            try {
                console.log('إرسال البيانات:', payload);
                const res = await fetch('/api/employees', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                console.log('استجابة الخادم:', res.status, res.statusText);

                if (res.ok) {
                    const result = await res.json();
                    resultMsg.innerHTML = '<div class="alert alert-success">تمت إضافة العميل بنجاح</div>';
                    form.reset();
                    // إعادة تعيين الصورة
                    selectedImageFile = null;
                    uploadedImageUrl = null;
                    document.getElementById('imagePreview').style.display = 'none';
                    document.getElementById('imageUploadButtons').style.display = 'flex';
                    document.getElementById('imageInput').value = '';
                    hideUploadStatus();

                    // تشغيل الصوت إذا كان متوفراً
                    try {
                        playSound('add.mp3');
                    } catch (soundErr) {
                        console.log('لم يتم العثور على ملف الصوت');
                    }
                } else {
                    const errorText = await res.text();
                    let errorMessage = 'حدث خطأ غير متوقع';

                    try {
                        const errorJson = JSON.parse(errorText);
                        errorMessage = errorJson.message || errorMessage;
                    } catch {
                        errorMessage = errorText || errorMessage;
                    }

                    resultMsg.innerHTML = `<div class="alert alert-danger">فشل: ${errorMessage}</div>`;
                }
            } catch (err) {
                console.error('خطأ في الاتصال:', err);
                resultMsg.innerHTML = '<div class="alert alert-danger">تعذر الاتصال بالخادم. تأكد من اتصال الإنترنت وحاول مرة أخرى.</div>';
            }
        });
    </script>
}
